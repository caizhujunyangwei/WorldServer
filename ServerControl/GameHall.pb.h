// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameHall.proto

#ifndef PROTOBUF_GameHall_2eproto__INCLUDED
#define PROTOBUF_GameHall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GameHall_2eproto();
void protobuf_AssignDesc_GameHall_2eproto();
void protobuf_ShutdownFile_GameHall_2eproto();

class EnterHall_CL;
class FreshUserGoods;
class FreshUserInfo_LC;
class HeatBeat;
class Mail_LC;
class Package;
class ReturnHall_CL;
class UserInfo;
class UserLogin_CL;
class UserLogin_LC;

// ===================================================================

class Package : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Package) */ {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Package& default_instance();

  void Swap(Package* other);

  // implements Message ----------------------------------------------

  inline Package* New() const { return New(NULL); }

  Package* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Package* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 msgID = 1;
  void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // optional bytes msgData = 2;
  void clear_msgdata();
  static const int kMsgDataFieldNumber = 2;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:pb.Package)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::int32 msgid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static Package* default_instance_;
};
// -------------------------------------------------------------------

class HeatBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.HeatBeat) */ {
 public:
  HeatBeat();
  virtual ~HeatBeat();

  HeatBeat(const HeatBeat& from);

  inline HeatBeat& operator=(const HeatBeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeatBeat& default_instance();

  void Swap(HeatBeat* other);

  // implements Message ----------------------------------------------

  inline HeatBeat* New() const { return New(NULL); }

  HeatBeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeatBeat& from);
  void MergeFrom(const HeatBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeatBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 second = 1;
  void clear_second();
  static const int kSecondFieldNumber = 1;
  ::google::protobuf::int32 second() const;
  void set_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.HeatBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 second_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static HeatBeat* default_instance_;
};
// -------------------------------------------------------------------

class Mail_LC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Mail_LC) */ {
 public:
  Mail_LC();
  virtual ~Mail_LC();

  Mail_LC(const Mail_LC& from);

  inline Mail_LC& operator=(const Mail_LC& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mail_LC& default_instance();

  void Swap(Mail_LC* other);

  // implements Message ----------------------------------------------

  inline Mail_LC* New() const { return New(NULL); }

  Mail_LC* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mail_LC& from);
  void MergeFrom(const Mail_LC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mail_LC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fromName = 1;
  void clear_fromname();
  static const int kFromNameFieldNumber = 1;
  const ::std::string& fromname() const;
  void set_fromname(const ::std::string& value);
  void set_fromname(const char* value);
  void set_fromname(const char* value, size_t size);
  ::std::string* mutable_fromname();
  ::std::string* release_fromname();
  void set_allocated_fromname(::std::string* fromname);

  // optional string time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string detail = 3;
  void clear_detail();
  static const int kDetailFieldNumber = 3;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // @@protoc_insertion_point(class_scope:pb.Mail_LC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr fromname_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static Mail_LC* default_instance_;
};
// -------------------------------------------------------------------

class UserLogin_CL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UserLogin_CL) */ {
 public:
  UserLogin_CL();
  virtual ~UserLogin_CL();

  UserLogin_CL(const UserLogin_CL& from);

  inline UserLogin_CL& operator=(const UserLogin_CL& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_CL& default_instance();

  void Swap(UserLogin_CL* other);

  // implements Message ----------------------------------------------

  inline UserLogin_CL* New() const { return New(NULL); }

  UserLogin_CL* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_CL& from);
  void MergeFrom(const UserLogin_CL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserLogin_CL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:pb.UserLogin_CL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static UserLogin_CL* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 sex = 3;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 coin = 4;
  void clear_coin();
  static const int kCoinFieldNumber = 4;
  ::google::protobuf::int32 coin() const;
  void set_coin(::google::protobuf::int32 value);

  // optional int32 diamond = 5;
  void clear_diamond();
  static const int kDiamondFieldNumber = 5;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // optional string headURL = 6;
  void clear_headurl();
  static const int kHeadURLFieldNumber = 6;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // optional bool isTemp = 7;
  void clear_istemp();
  static const int kIsTempFieldNumber = 7;
  bool istemp() const;
  void set_istemp(bool value);

  // @@protoc_insertion_point(class_scope:pb.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  bool istemp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserLogin_LC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.UserLogin_LC) */ {
 public:
  UserLogin_LC();
  virtual ~UserLogin_LC();

  UserLogin_LC(const UserLogin_LC& from);

  inline UserLogin_LC& operator=(const UserLogin_LC& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_LC& default_instance();

  void Swap(UserLogin_LC* other);

  // implements Message ----------------------------------------------

  inline UserLogin_LC* New() const { return New(NULL); }

  UserLogin_LC* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_LC& from);
  void MergeFrom(const UserLogin_LC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserLogin_LC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.UserInfo userinfo = 1;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  const ::pb::UserInfo& userinfo() const;
  ::pb::UserInfo* mutable_userinfo();
  ::pb::UserInfo* release_userinfo();
  void set_allocated_userinfo(::pb::UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.UserLogin_LC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb::UserInfo* userinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static UserLogin_LC* default_instance_;
};
// -------------------------------------------------------------------

class EnterHall_CL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EnterHall_CL) */ {
 public:
  EnterHall_CL();
  virtual ~EnterHall_CL();

  EnterHall_CL(const EnterHall_CL& from);

  inline EnterHall_CL& operator=(const EnterHall_CL& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterHall_CL& default_instance();

  void Swap(EnterHall_CL* other);

  // implements Message ----------------------------------------------

  inline EnterHall_CL* New() const { return New(NULL); }

  EnterHall_CL* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterHall_CL& from);
  void MergeFrom(const EnterHall_CL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnterHall_CL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.EnterHall_CL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static EnterHall_CL* default_instance_;
};
// -------------------------------------------------------------------

class ReturnHall_CL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReturnHall_CL) */ {
 public:
  ReturnHall_CL();
  virtual ~ReturnHall_CL();

  ReturnHall_CL(const ReturnHall_CL& from);

  inline ReturnHall_CL& operator=(const ReturnHall_CL& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnHall_CL& default_instance();

  void Swap(ReturnHall_CL* other);

  // implements Message ----------------------------------------------

  inline ReturnHall_CL* New() const { return New(NULL); }

  ReturnHall_CL* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnHall_CL& from);
  void MergeFrom(const ReturnHall_CL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReturnHall_CL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:pb.ReturnHall_CL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static ReturnHall_CL* default_instance_;
};
// -------------------------------------------------------------------

class FreshUserInfo_LC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.FreshUserInfo_LC) */ {
 public:
  FreshUserInfo_LC();
  virtual ~FreshUserInfo_LC();

  FreshUserInfo_LC(const FreshUserInfo_LC& from);

  inline FreshUserInfo_LC& operator=(const FreshUserInfo_LC& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreshUserInfo_LC& default_instance();

  void Swap(FreshUserInfo_LC* other);

  // implements Message ----------------------------------------------

  inline FreshUserInfo_LC* New() const { return New(NULL); }

  FreshUserInfo_LC* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreshUserInfo_LC& from);
  void MergeFrom(const FreshUserInfo_LC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FreshUserInfo_LC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.UserInfo userinfo = 1;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  const ::pb::UserInfo& userinfo() const;
  ::pb::UserInfo* mutable_userinfo();
  ::pb::UserInfo* release_userinfo();
  void set_allocated_userinfo(::pb::UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.FreshUserInfo_LC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb::UserInfo* userinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static FreshUserInfo_LC* default_instance_;
};
// -------------------------------------------------------------------

class FreshUserGoods : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.FreshUserGoods) */ {
 public:
  FreshUserGoods();
  virtual ~FreshUserGoods();

  FreshUserGoods(const FreshUserGoods& from);

  inline FreshUserGoods& operator=(const FreshUserGoods& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreshUserGoods& default_instance();

  void Swap(FreshUserGoods* other);

  // implements Message ----------------------------------------------

  inline FreshUserGoods* New() const { return New(NULL); }

  FreshUserGoods* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreshUserGoods& from);
  void MergeFrom(const FreshUserGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FreshUserGoods* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 coins = 1;
  void clear_coins();
  static const int kCoinsFieldNumber = 1;
  ::google::protobuf::int32 coins() const;
  void set_coins(::google::protobuf::int32 value);

  // optional int32 diamonds = 2;
  void clear_diamonds();
  static const int kDiamondsFieldNumber = 2;
  ::google::protobuf::int32 diamonds() const;
  void set_diamonds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.FreshUserGoods)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 coins_;
  ::google::protobuf::int32 diamonds_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameHall_2eproto();
  friend void protobuf_AssignDesc_GameHall_2eproto();
  friend void protobuf_ShutdownFile_GameHall_2eproto();

  void InitAsDefaultInstance();
  static FreshUserGoods* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Package

// optional int32 msgID = 1;
inline void Package::clear_msgid() {
  msgid_ = 0;
}
inline ::google::protobuf::int32 Package::msgid() const {
  // @@protoc_insertion_point(field_get:pb.Package.msgID)
  return msgid_;
}
inline void Package::set_msgid(::google::protobuf::int32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:pb.Package.msgID)
}

// optional bytes msgData = 2;
inline void Package::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Package::msgdata() const {
  // @@protoc_insertion_point(field_get:pb.Package.msgData)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Package::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Package.msgData)
}
inline void Package::set_msgdata(const char* value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Package.msgData)
}
inline void Package::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Package.msgData)
}
inline ::std::string* Package::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:pb.Package.msgData)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Package::release_msgdata() {
  // @@protoc_insertion_point(field_release:pb.Package.msgData)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Package::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:pb.Package.msgData)
}

// -------------------------------------------------------------------

// HeatBeat

// optional int32 second = 1;
inline void HeatBeat::clear_second() {
  second_ = 0;
}
inline ::google::protobuf::int32 HeatBeat::second() const {
  // @@protoc_insertion_point(field_get:pb.HeatBeat.second)
  return second_;
}
inline void HeatBeat::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:pb.HeatBeat.second)
}

// -------------------------------------------------------------------

// Mail_LC

// optional string fromName = 1;
inline void Mail_LC::clear_fromname() {
  fromname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mail_LC::fromname() const {
  // @@protoc_insertion_point(field_get:pb.Mail_LC.fromName)
  return fromname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mail_LC::set_fromname(const ::std::string& value) {
  
  fromname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Mail_LC.fromName)
}
inline void Mail_LC::set_fromname(const char* value) {
  
  fromname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Mail_LC.fromName)
}
inline void Mail_LC::set_fromname(const char* value, size_t size) {
  
  fromname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Mail_LC.fromName)
}
inline ::std::string* Mail_LC::mutable_fromname() {
  
  // @@protoc_insertion_point(field_mutable:pb.Mail_LC.fromName)
  return fromname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mail_LC::release_fromname() {
  // @@protoc_insertion_point(field_release:pb.Mail_LC.fromName)
  
  return fromname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mail_LC::set_allocated_fromname(::std::string* fromname) {
  if (fromname != NULL) {
    
  } else {
    
  }
  fromname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromname);
  // @@protoc_insertion_point(field_set_allocated:pb.Mail_LC.fromName)
}

// optional string time = 2;
inline void Mail_LC::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mail_LC::time() const {
  // @@protoc_insertion_point(field_get:pb.Mail_LC.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mail_LC::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Mail_LC.time)
}
inline void Mail_LC::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Mail_LC.time)
}
inline void Mail_LC::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Mail_LC.time)
}
inline ::std::string* Mail_LC::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.Mail_LC.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mail_LC::release_time() {
  // @@protoc_insertion_point(field_release:pb.Mail_LC.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mail_LC::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pb.Mail_LC.time)
}

// optional string detail = 3;
inline void Mail_LC::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mail_LC::detail() const {
  // @@protoc_insertion_point(field_get:pb.Mail_LC.detail)
  return detail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mail_LC::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Mail_LC.detail)
}
inline void Mail_LC::set_detail(const char* value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Mail_LC.detail)
}
inline void Mail_LC::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Mail_LC.detail)
}
inline ::std::string* Mail_LC::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:pb.Mail_LC.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mail_LC::release_detail() {
  // @@protoc_insertion_point(field_release:pb.Mail_LC.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mail_LC::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:pb.Mail_LC.detail)
}

// -------------------------------------------------------------------

// UserLogin_CL

// optional string token = 1;
inline void UserLogin_CL::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLogin_CL::token() const {
  // @@protoc_insertion_point(field_get:pb.UserLogin_CL.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogin_CL::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserLogin_CL.token)
}
inline void UserLogin_CL::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserLogin_CL.token)
}
inline void UserLogin_CL::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserLogin_CL.token)
}
inline ::std::string* UserLogin_CL::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserLogin_CL.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLogin_CL::release_token() {
  // @@protoc_insertion_point(field_release:pb.UserLogin_CL.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogin_CL::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.UserLogin_CL.token)
}

// -------------------------------------------------------------------

// UserInfo

// optional int32 id = 1;
inline void UserInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.id)
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.id)
}

// optional string name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.UserInfo.name)
}

// optional int32 sex = 3;
inline void UserInfo::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.sex)
  return sex_;
}
inline void UserInfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.sex)
}

// optional int32 coin = 4;
inline void UserInfo::clear_coin() {
  coin_ = 0;
}
inline ::google::protobuf::int32 UserInfo::coin() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.coin)
  return coin_;
}
inline void UserInfo::set_coin(::google::protobuf::int32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.coin)
}

// optional int32 diamond = 5;
inline void UserInfo::clear_diamond() {
  diamond_ = 0;
}
inline ::google::protobuf::int32 UserInfo::diamond() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.diamond)
  return diamond_;
}
inline void UserInfo::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.diamond)
}

// optional string headURL = 6;
inline void UserInfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::headurl() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.headURL)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.headURL)
}
inline void UserInfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserInfo.headURL)
}
inline void UserInfo::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserInfo.headURL)
}
inline ::std::string* UserInfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserInfo.headURL)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_headurl() {
  // @@protoc_insertion_point(field_release:pb.UserInfo.headURL)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:pb.UserInfo.headURL)
}

// optional bool isTemp = 7;
inline void UserInfo::clear_istemp() {
  istemp_ = false;
}
inline bool UserInfo::istemp() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.isTemp)
  return istemp_;
}
inline void UserInfo::set_istemp(bool value) {
  
  istemp_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.isTemp)
}

// -------------------------------------------------------------------

// UserLogin_LC

// optional .pb.UserInfo userinfo = 1;
inline bool UserLogin_LC::has_userinfo() const {
  return !_is_default_instance_ && userinfo_ != NULL;
}
inline void UserLogin_LC::clear_userinfo() {
  if (GetArenaNoVirtual() == NULL && userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}
inline const ::pb::UserInfo& UserLogin_LC::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.UserLogin_LC.userinfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::UserInfo* UserLogin_LC::mutable_userinfo() {
  
  if (userinfo_ == NULL) {
    userinfo_ = new ::pb::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.UserLogin_LC.userinfo)
  return userinfo_;
}
inline ::pb::UserInfo* UserLogin_LC::release_userinfo() {
  // @@protoc_insertion_point(field_release:pb.UserLogin_LC.userinfo)
  
  ::pb::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void UserLogin_LC::set_allocated_userinfo(::pb::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.UserLogin_LC.userinfo)
}

// -------------------------------------------------------------------

// EnterHall_CL

// -------------------------------------------------------------------

// ReturnHall_CL

// optional string token = 1;
inline void ReturnHall_CL::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReturnHall_CL::token() const {
  // @@protoc_insertion_point(field_get:pb.ReturnHall_CL.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReturnHall_CL::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReturnHall_CL.token)
}
inline void ReturnHall_CL::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReturnHall_CL.token)
}
inline void ReturnHall_CL::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReturnHall_CL.token)
}
inline ::std::string* ReturnHall_CL::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReturnHall_CL.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReturnHall_CL::release_token() {
  // @@protoc_insertion_point(field_release:pb.ReturnHall_CL.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReturnHall_CL::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.ReturnHall_CL.token)
}

// -------------------------------------------------------------------

// FreshUserInfo_LC

// optional .pb.UserInfo userinfo = 1;
inline bool FreshUserInfo_LC::has_userinfo() const {
  return !_is_default_instance_ && userinfo_ != NULL;
}
inline void FreshUserInfo_LC::clear_userinfo() {
  if (GetArenaNoVirtual() == NULL && userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}
inline const ::pb::UserInfo& FreshUserInfo_LC::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.FreshUserInfo_LC.userinfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::UserInfo* FreshUserInfo_LC::mutable_userinfo() {
  
  if (userinfo_ == NULL) {
    userinfo_ = new ::pb::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.FreshUserInfo_LC.userinfo)
  return userinfo_;
}
inline ::pb::UserInfo* FreshUserInfo_LC::release_userinfo() {
  // @@protoc_insertion_point(field_release:pb.FreshUserInfo_LC.userinfo)
  
  ::pb::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void FreshUserInfo_LC::set_allocated_userinfo(::pb::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FreshUserInfo_LC.userinfo)
}

// -------------------------------------------------------------------

// FreshUserGoods

// optional int32 coins = 1;
inline void FreshUserGoods::clear_coins() {
  coins_ = 0;
}
inline ::google::protobuf::int32 FreshUserGoods::coins() const {
  // @@protoc_insertion_point(field_get:pb.FreshUserGoods.coins)
  return coins_;
}
inline void FreshUserGoods::set_coins(::google::protobuf::int32 value) {
  
  coins_ = value;
  // @@protoc_insertion_point(field_set:pb.FreshUserGoods.coins)
}

// optional int32 diamonds = 2;
inline void FreshUserGoods::clear_diamonds() {
  diamonds_ = 0;
}
inline ::google::protobuf::int32 FreshUserGoods::diamonds() const {
  // @@protoc_insertion_point(field_get:pb.FreshUserGoods.diamonds)
  return diamonds_;
}
inline void FreshUserGoods::set_diamonds(::google::protobuf::int32 value) {
  
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:pb.FreshUserGoods.diamonds)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameHall_2eproto__INCLUDED
