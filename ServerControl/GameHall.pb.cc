// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameHall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameHall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Package_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Package_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeatBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeatBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_LC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_LC_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_CL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_CL_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_LC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_LC_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterHall_CL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterHall_CL_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnHall_CL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnHall_CL_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreshUserInfo_LC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshUserInfo_LC_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreshUserGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshUserGoods_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameHall_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameHall_2eproto() {
  protobuf_AddDesc_GameHall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameHall.proto");
  GOOGLE_CHECK(file != NULL);
  Package_descriptor_ = file->message_type(0);
  static const int Package_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, msgdata_),
  };
  Package_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Package_descriptor_,
      Package::default_instance_,
      Package_offsets_,
      -1,
      -1,
      -1,
      sizeof(Package),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, _is_default_instance_));
  HeatBeat_descriptor_ = file->message_type(1);
  static const int HeatBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatBeat, second_),
  };
  HeatBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeatBeat_descriptor_,
      HeatBeat::default_instance_,
      HeatBeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeatBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatBeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatBeat, _is_default_instance_));
  Mail_LC_descriptor_ = file->message_type(2);
  static const int Mail_LC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_LC, fromname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_LC, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_LC, detail_),
  };
  Mail_LC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mail_LC_descriptor_,
      Mail_LC::default_instance_,
      Mail_LC_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mail_LC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_LC, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail_LC, _is_default_instance_));
  UserLogin_CL_descriptor_ = file->message_type(3);
  static const int UserLogin_CL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_CL, token_),
  };
  UserLogin_CL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserLogin_CL_descriptor_,
      UserLogin_CL::default_instance_,
      UserLogin_CL_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserLogin_CL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_CL, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_CL, _is_default_instance_));
  UserInfo_descriptor_ = file->message_type(4);
  static const int UserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, istemp_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  UserLogin_LC_descriptor_ = file->message_type(5);
  static const int UserLogin_LC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_LC, userinfo_),
  };
  UserLogin_LC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserLogin_LC_descriptor_,
      UserLogin_LC::default_instance_,
      UserLogin_LC_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserLogin_LC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_LC, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_LC, _is_default_instance_));
  EnterHall_CL_descriptor_ = file->message_type(6);
  static const int EnterHall_CL_offsets_[1] = {
  };
  EnterHall_CL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterHall_CL_descriptor_,
      EnterHall_CL::default_instance_,
      EnterHall_CL_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnterHall_CL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall_CL, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall_CL, _is_default_instance_));
  ReturnHall_CL_descriptor_ = file->message_type(7);
  static const int ReturnHall_CL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnHall_CL, token_),
  };
  ReturnHall_CL_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReturnHall_CL_descriptor_,
      ReturnHall_CL::default_instance_,
      ReturnHall_CL_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReturnHall_CL),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnHall_CL, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnHall_CL, _is_default_instance_));
  FreshUserInfo_LC_descriptor_ = file->message_type(8);
  static const int FreshUserInfo_LC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserInfo_LC, userinfo_),
  };
  FreshUserInfo_LC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FreshUserInfo_LC_descriptor_,
      FreshUserInfo_LC::default_instance_,
      FreshUserInfo_LC_offsets_,
      -1,
      -1,
      -1,
      sizeof(FreshUserInfo_LC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserInfo_LC, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserInfo_LC, _is_default_instance_));
  FreshUserGoods_descriptor_ = file->message_type(9);
  static const int FreshUserGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserGoods, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserGoods, diamonds_),
  };
  FreshUserGoods_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FreshUserGoods_descriptor_,
      FreshUserGoods::default_instance_,
      FreshUserGoods_offsets_,
      -1,
      -1,
      -1,
      sizeof(FreshUserGoods),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserGoods, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshUserGoods, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameHall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Package_descriptor_, &Package::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeatBeat_descriptor_, &HeatBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mail_LC_descriptor_, &Mail_LC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserLogin_CL_descriptor_, &UserLogin_CL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserLogin_LC_descriptor_, &UserLogin_LC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterHall_CL_descriptor_, &EnterHall_CL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReturnHall_CL_descriptor_, &ReturnHall_CL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FreshUserInfo_LC_descriptor_, &FreshUserInfo_LC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FreshUserGoods_descriptor_, &FreshUserGoods::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameHall_2eproto() {
  delete Package::default_instance_;
  delete Package_reflection_;
  delete HeatBeat::default_instance_;
  delete HeatBeat_reflection_;
  delete Mail_LC::default_instance_;
  delete Mail_LC_reflection_;
  delete UserLogin_CL::default_instance_;
  delete UserLogin_CL_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserLogin_LC::default_instance_;
  delete UserLogin_LC_reflection_;
  delete EnterHall_CL::default_instance_;
  delete EnterHall_CL_reflection_;
  delete ReturnHall_CL::default_instance_;
  delete ReturnHall_CL_reflection_;
  delete FreshUserInfo_LC::default_instance_;
  delete FreshUserInfo_LC_reflection_;
  delete FreshUserGoods::default_instance_;
  delete FreshUserGoods_reflection_;
}

void protobuf_AddDesc_GameHall_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GameHall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GameHall.proto\022\002pb\")\n\007Package\022\r\n\005msgID"
    "\030\001 \001(\005\022\017\n\007msgData\030\002 \001(\014\"\032\n\010HeatBeat\022\016\n\006s"
    "econd\030\001 \001(\005\"9\n\007Mail_LC\022\020\n\010fromName\030\001 \001(\t"
    "\022\014\n\004time\030\002 \001(\t\022\016\n\006detail\030\003 \001(\t\"\035\n\014UserLo"
    "gin_CL\022\r\n\005token\030\001 \001(\t\"q\n\010UserInfo\022\n\n\002id\030"
    "\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003sex\030\003 \001(\005\022\014\n\004coin"
    "\030\004 \001(\005\022\017\n\007diamond\030\005 \001(\005\022\017\n\007headURL\030\006 \001(\t"
    "\022\016\n\006isTemp\030\007 \001(\010\".\n\014UserLogin_LC\022\036\n\010user"
    "info\030\001 \001(\0132\014.pb.UserInfo\"\016\n\014EnterHall_CL"
    "\"\036\n\rReturnHall_CL\022\r\n\005token\030\001 \001(\t\"2\n\020Fres"
    "hUserInfo_LC\022\036\n\010userinfo\030\001 \001(\0132\014.pb.User"
    "Info\"1\n\016FreshUserGoods\022\r\n\005coins\030\001 \001(\005\022\020\n"
    "\010diamonds\030\002 \001(\005b\006proto3", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameHall.proto", &protobuf_RegisterTypes);
  Package::default_instance_ = new Package();
  HeatBeat::default_instance_ = new HeatBeat();
  Mail_LC::default_instance_ = new Mail_LC();
  UserLogin_CL::default_instance_ = new UserLogin_CL();
  UserInfo::default_instance_ = new UserInfo();
  UserLogin_LC::default_instance_ = new UserLogin_LC();
  EnterHall_CL::default_instance_ = new EnterHall_CL();
  ReturnHall_CL::default_instance_ = new ReturnHall_CL();
  FreshUserInfo_LC::default_instance_ = new FreshUserInfo_LC();
  FreshUserGoods::default_instance_ = new FreshUserGoods();
  Package::default_instance_->InitAsDefaultInstance();
  HeatBeat::default_instance_->InitAsDefaultInstance();
  Mail_LC::default_instance_->InitAsDefaultInstance();
  UserLogin_CL::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserLogin_LC::default_instance_->InitAsDefaultInstance();
  EnterHall_CL::default_instance_->InitAsDefaultInstance();
  ReturnHall_CL::default_instance_->InitAsDefaultInstance();
  FreshUserInfo_LC::default_instance_->InitAsDefaultInstance();
  FreshUserGoods::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameHall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameHall_2eproto {
  StaticDescriptorInitializer_GameHall_2eproto() {
    protobuf_AddDesc_GameHall_2eproto();
  }
} static_descriptor_initializer_GameHall_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Package::kMsgIDFieldNumber;
const int Package::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Package::Package()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Package)
}

void Package::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Package::Package(const Package& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Package)
}

void Package::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0;
  msgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:pb.Package)
  SharedDtor();
}

void Package::SharedDtor() {
  msgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Package::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Package_descriptor_;
}

const Package& Package::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

Package* Package::default_instance_ = NULL;

Package* Package::New(::google::protobuf::Arena* arena) const {
  Package* n = new Package;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Package)
  msgid_ = 0;
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Package)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgData;
        break;
      }

      // optional bytes msgData = 2;
      case 2: {
        if (tag == 18) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Package)
  return false;
#undef DO_
}

void Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Package)
  // optional int32 msgID = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }

  // optional bytes msgData = 2;
  if (this->msgdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msgdata(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Package)
}

::google::protobuf::uint8* Package::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Package)
  // optional int32 msgID = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }

  // optional bytes msgData = 2;
  if (this->msgdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgdata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Package)
  return target;
}

int Package::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Package)
  int total_size = 0;

  // optional int32 msgID = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgid());
  }

  // optional bytes msgData = 2;
  if (this->msgdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msgdata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Package::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Package)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Package* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Package>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Package)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Package)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.msgdata().size() > 0) {

    msgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdata_);
  }
}

void Package::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {

  return true;
}

void Package::Swap(Package* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Package::InternalSwap(Package* other) {
  std::swap(msgid_, other->msgid_);
  msgdata_.Swap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Package::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Package_descriptor_;
  metadata.reflection = Package_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Package

// optional int32 msgID = 1;
void Package::clear_msgid() {
  msgid_ = 0;
}
 ::google::protobuf::int32 Package::msgid() const {
  // @@protoc_insertion_point(field_get:pb.Package.msgID)
  return msgid_;
}
 void Package::set_msgid(::google::protobuf::int32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:pb.Package.msgID)
}

// optional bytes msgData = 2;
void Package::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Package::msgdata() const {
  // @@protoc_insertion_point(field_get:pb.Package.msgData)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Package::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Package.msgData)
}
 void Package::set_msgdata(const char* value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Package.msgData)
}
 void Package::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Package.msgData)
}
 ::std::string* Package::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:pb.Package.msgData)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Package::release_msgdata() {
  // @@protoc_insertion_point(field_release:pb.Package.msgData)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Package::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:pb.Package.msgData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeatBeat::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeatBeat::HeatBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.HeatBeat)
}

void HeatBeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HeatBeat::HeatBeat(const HeatBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.HeatBeat)
}

void HeatBeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  second_ = 0;
}

HeatBeat::~HeatBeat() {
  // @@protoc_insertion_point(destructor:pb.HeatBeat)
  SharedDtor();
}

void HeatBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeatBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeatBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeatBeat_descriptor_;
}

const HeatBeat& HeatBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

HeatBeat* HeatBeat::default_instance_ = NULL;

HeatBeat* HeatBeat::New(::google::protobuf::Arena* arena) const {
  HeatBeat* n = new HeatBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeatBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.HeatBeat)
  second_ = 0;
}

bool HeatBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.HeatBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 second = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.HeatBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.HeatBeat)
  return false;
#undef DO_
}

void HeatBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.HeatBeat)
  // optional int32 second = 1;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->second(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.HeatBeat)
}

::google::protobuf::uint8* HeatBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.HeatBeat)
  // optional int32 second = 1;
  if (this->second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->second(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.HeatBeat)
  return target;
}

int HeatBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.HeatBeat)
  int total_size = 0;

  // optional int32 second = 1;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->second());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeatBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.HeatBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeatBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeatBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.HeatBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.HeatBeat)
    MergeFrom(*source);
  }
}

void HeatBeat::MergeFrom(const HeatBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.HeatBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
}

void HeatBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.HeatBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeatBeat::CopyFrom(const HeatBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.HeatBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeatBeat::IsInitialized() const {

  return true;
}

void HeatBeat::Swap(HeatBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeatBeat::InternalSwap(HeatBeat* other) {
  std::swap(second_, other->second_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeatBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeatBeat_descriptor_;
  metadata.reflection = HeatBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeatBeat

// optional int32 second = 1;
void HeatBeat::clear_second() {
  second_ = 0;
}
 ::google::protobuf::int32 HeatBeat::second() const {
  // @@protoc_insertion_point(field_get:pb.HeatBeat.second)
  return second_;
}
 void HeatBeat::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:pb.HeatBeat.second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mail_LC::kFromNameFieldNumber;
const int Mail_LC::kTimeFieldNumber;
const int Mail_LC::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mail_LC::Mail_LC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Mail_LC)
}

void Mail_LC::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mail_LC::Mail_LC(const Mail_LC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Mail_LC)
}

void Mail_LC::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mail_LC::~Mail_LC() {
  // @@protoc_insertion_point(destructor:pb.Mail_LC)
  SharedDtor();
}

void Mail_LC::SharedDtor() {
  fromname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Mail_LC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail_LC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_LC_descriptor_;
}

const Mail_LC& Mail_LC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

Mail_LC* Mail_LC::default_instance_ = NULL;

Mail_LC* Mail_LC::New(::google::protobuf::Arena* arena) const {
  Mail_LC* n = new Mail_LC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mail_LC::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Mail_LC)
  fromname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mail_LC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Mail_LC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fromName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromname().data(), this->fromname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Mail_LC.fromName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Mail_LC.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // optional string detail = 3;
      case 3: {
        if (tag == 26) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Mail_LC.detail"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Mail_LC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Mail_LC)
  return false;
#undef DO_
}

void Mail_LC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Mail_LC)
  // optional string fromName = 1;
  if (this->fromname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromname().data(), this->fromname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Mail_LC.fromName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromname(), output);
  }

  // optional string time = 2;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Mail_LC.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time(), output);
  }

  // optional string detail = 3;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Mail_LC.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detail(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.Mail_LC)
}

::google::protobuf::uint8* Mail_LC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Mail_LC)
  // optional string fromName = 1;
  if (this->fromname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromname().data(), this->fromname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Mail_LC.fromName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromname(), target);
  }

  // optional string time = 2;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Mail_LC.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional string detail = 3;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Mail_LC.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->detail(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.Mail_LC)
  return target;
}

int Mail_LC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Mail_LC)
  int total_size = 0;

  // optional string fromName = 1;
  if (this->fromname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromname());
  }

  // optional string time = 2;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional string detail = 3;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail_LC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Mail_LC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mail_LC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mail_LC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Mail_LC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Mail_LC)
    MergeFrom(*source);
  }
}

void Mail_LC::MergeFrom(const Mail_LC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Mail_LC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fromname().size() > 0) {

    fromname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromname_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
}

void Mail_LC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Mail_LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail_LC::CopyFrom(const Mail_LC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Mail_LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_LC::IsInitialized() const {

  return true;
}

void Mail_LC::Swap(Mail_LC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mail_LC::InternalSwap(Mail_LC* other) {
  fromname_.Swap(&other->fromname_);
  time_.Swap(&other->time_);
  detail_.Swap(&other->detail_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mail_LC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_LC_descriptor_;
  metadata.reflection = Mail_LC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mail_LC

// optional string fromName = 1;
void Mail_LC::clear_fromname() {
  fromname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mail_LC::fromname() const {
  // @@protoc_insertion_point(field_get:pb.Mail_LC.fromName)
  return fromname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mail_LC::set_fromname(const ::std::string& value) {
  
  fromname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Mail_LC.fromName)
}
 void Mail_LC::set_fromname(const char* value) {
  
  fromname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Mail_LC.fromName)
}
 void Mail_LC::set_fromname(const char* value, size_t size) {
  
  fromname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Mail_LC.fromName)
}
 ::std::string* Mail_LC::mutable_fromname() {
  
  // @@protoc_insertion_point(field_mutable:pb.Mail_LC.fromName)
  return fromname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mail_LC::release_fromname() {
  // @@protoc_insertion_point(field_release:pb.Mail_LC.fromName)
  
  return fromname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mail_LC::set_allocated_fromname(::std::string* fromname) {
  if (fromname != NULL) {
    
  } else {
    
  }
  fromname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromname);
  // @@protoc_insertion_point(field_set_allocated:pb.Mail_LC.fromName)
}

// optional string time = 2;
void Mail_LC::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mail_LC::time() const {
  // @@protoc_insertion_point(field_get:pb.Mail_LC.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mail_LC::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Mail_LC.time)
}
 void Mail_LC::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Mail_LC.time)
}
 void Mail_LC::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Mail_LC.time)
}
 ::std::string* Mail_LC::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.Mail_LC.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mail_LC::release_time() {
  // @@protoc_insertion_point(field_release:pb.Mail_LC.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mail_LC::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pb.Mail_LC.time)
}

// optional string detail = 3;
void Mail_LC::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mail_LC::detail() const {
  // @@protoc_insertion_point(field_get:pb.Mail_LC.detail)
  return detail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mail_LC::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Mail_LC.detail)
}
 void Mail_LC::set_detail(const char* value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Mail_LC.detail)
}
 void Mail_LC::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Mail_LC.detail)
}
 ::std::string* Mail_LC::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:pb.Mail_LC.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mail_LC::release_detail() {
  // @@protoc_insertion_point(field_release:pb.Mail_LC.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mail_LC::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:pb.Mail_LC.detail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLogin_CL::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLogin_CL::UserLogin_CL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserLogin_CL)
}

void UserLogin_CL::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserLogin_CL::UserLogin_CL(const UserLogin_CL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.UserLogin_CL)
}

void UserLogin_CL::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserLogin_CL::~UserLogin_CL() {
  // @@protoc_insertion_point(destructor:pb.UserLogin_CL)
  SharedDtor();
}

void UserLogin_CL::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserLogin_CL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogin_CL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_CL_descriptor_;
}

const UserLogin_CL& UserLogin_CL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

UserLogin_CL* UserLogin_CL::default_instance_ = NULL;

UserLogin_CL* UserLogin_CL::New(::google::protobuf::Arena* arena) const {
  UserLogin_CL* n = new UserLogin_CL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLogin_CL::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UserLogin_CL)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserLogin_CL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UserLogin_CL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserLogin_CL.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserLogin_CL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserLogin_CL)
  return false;
#undef DO_
}

void UserLogin_CL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserLogin_CL)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserLogin_CL.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.UserLogin_CL)
}

::google::protobuf::uint8* UserLogin_CL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UserLogin_CL)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserLogin_CL.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.UserLogin_CL)
  return target;
}

int UserLogin_CL::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UserLogin_CL)
  int total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin_CL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UserLogin_CL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserLogin_CL* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLogin_CL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UserLogin_CL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UserLogin_CL)
    MergeFrom(*source);
  }
}

void UserLogin_CL::MergeFrom(const UserLogin_CL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UserLogin_CL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void UserLogin_CL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UserLogin_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_CL::CopyFrom(const UserLogin_CL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UserLogin_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_CL::IsInitialized() const {

  return true;
}

void UserLogin_CL::Swap(UserLogin_CL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLogin_CL::InternalSwap(UserLogin_CL* other) {
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLogin_CL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_CL_descriptor_;
  metadata.reflection = UserLogin_CL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLogin_CL

// optional string token = 1;
void UserLogin_CL::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserLogin_CL::token() const {
  // @@protoc_insertion_point(field_get:pb.UserLogin_CL.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_CL::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserLogin_CL.token)
}
 void UserLogin_CL::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserLogin_CL.token)
}
 void UserLogin_CL::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserLogin_CL.token)
}
 ::std::string* UserLogin_CL::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserLogin_CL.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserLogin_CL::release_token() {
  // @@protoc_insertion_point(field_release:pb.UserLogin_CL.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserLogin_CL::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.UserLogin_CL.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kIdFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kSexFieldNumber;
const int UserInfo::kCoinFieldNumber;
const int UserInfo::kDiamondFieldNumber;
const int UserInfo::kHeadURLFieldNumber;
const int UserInfo::kIsTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  coin_ = 0;
  diamond_ = 0;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istemp_ = false;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:pb.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, diamond_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istemp_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // optional int32 coin = 4;
      case 4: {
        if (tag == 32) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 5;
      case 5: {
        if (tag == 40) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_headURL;
        break;
      }

      // optional string headURL = 6;
      case 6: {
        if (tag == 50) {
         parse_headURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.UserInfo.headURL"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isTemp;
        break;
      }

      // optional bool isTemp = 7;
      case 7: {
        if (tag == 56) {
         parse_isTemp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istemp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 sex = 3;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional int32 coin = 4;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coin(), output);
  }

  // optional int32 diamond = 5;
  if (this->diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamond(), output);
  }

  // optional string headURL = 6;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.headURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->headurl(), output);
  }

  // optional bool isTemp = 7;
  if (this->istemp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->istemp(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UserInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 sex = 3;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional int32 coin = 4;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coin(), target);
  }

  // optional int32 diamond = 5;
  if (this->diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamond(), target);
  }

  // optional string headURL = 6;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.UserInfo.headURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headurl(), target);
  }

  // optional bool isTemp = 7;
  if (this->istemp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->istemp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UserInfo)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  // optional int32 coin = 4;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coin());
  }

  // optional int32 diamond = 5;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  // optional string headURL = 6;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());
  }

  // optional bool isTemp = 7;
  if (this->istemp() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.diamond() != 0) {
    set_diamond(from.diamond());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.istemp() != 0) {
    set_istemp(from.istemp());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(sex_, other->sex_);
  std::swap(coin_, other->coin_);
  std::swap(diamond_, other->diamond_);
  headurl_.Swap(&other->headurl_);
  std::swap(istemp_, other->istemp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional int32 id = 1;
void UserInfo::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.id)
  return id_;
}
 void UserInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.id)
}

// optional string name = 2;
void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.name)
}
 void UserInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserInfo.name)
}
 void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserInfo.name)
}
 ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.UserInfo.name)
}

// optional int32 sex = 3;
void UserInfo::clear_sex() {
  sex_ = 0;
}
 ::google::protobuf::int32 UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.sex)
  return sex_;
}
 void UserInfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.sex)
}

// optional int32 coin = 4;
void UserInfo::clear_coin() {
  coin_ = 0;
}
 ::google::protobuf::int32 UserInfo::coin() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.coin)
  return coin_;
}
 void UserInfo::set_coin(::google::protobuf::int32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.coin)
}

// optional int32 diamond = 5;
void UserInfo::clear_diamond() {
  diamond_ = 0;
}
 ::google::protobuf::int32 UserInfo::diamond() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.diamond)
  return diamond_;
}
 void UserInfo::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.diamond)
}

// optional string headURL = 6;
void UserInfo::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::headurl() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.headURL)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.UserInfo.headURL)
}
 void UserInfo::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.UserInfo.headURL)
}
 void UserInfo::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.UserInfo.headURL)
}
 ::std::string* UserInfo::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:pb.UserInfo.headURL)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_headurl() {
  // @@protoc_insertion_point(field_release:pb.UserInfo.headURL)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:pb.UserInfo.headURL)
}

// optional bool isTemp = 7;
void UserInfo::clear_istemp() {
  istemp_ = false;
}
 bool UserInfo::istemp() const {
  // @@protoc_insertion_point(field_get:pb.UserInfo.isTemp)
  return istemp_;
}
 void UserInfo::set_istemp(bool value) {
  
  istemp_ = value;
  // @@protoc_insertion_point(field_set:pb.UserInfo.isTemp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLogin_LC::kUserinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLogin_LC::UserLogin_LC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserLogin_LC)
}

void UserLogin_LC::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  userinfo_ = const_cast< ::pb::UserInfo*>(&::pb::UserInfo::default_instance());
}

UserLogin_LC::UserLogin_LC(const UserLogin_LC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.UserLogin_LC)
}

void UserLogin_LC::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userinfo_ = NULL;
}

UserLogin_LC::~UserLogin_LC() {
  // @@protoc_insertion_point(destructor:pb.UserLogin_LC)
  SharedDtor();
}

void UserLogin_LC::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void UserLogin_LC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogin_LC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_LC_descriptor_;
}

const UserLogin_LC& UserLogin_LC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

UserLogin_LC* UserLogin_LC::default_instance_ = NULL;

UserLogin_LC* UserLogin_LC::New(::google::protobuf::Arena* arena) const {
  UserLogin_LC* n = new UserLogin_LC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserLogin_LC::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UserLogin_LC)
  if (GetArenaNoVirtual() == NULL && userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}

bool UserLogin_LC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UserLogin_LC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.UserInfo userinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserLogin_LC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserLogin_LC)
  return false;
#undef DO_
}

void UserLogin_LC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserLogin_LC)
  // optional .pb.UserInfo userinfo = 1;
  if (this->has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->userinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.UserLogin_LC)
}

::google::protobuf::uint8* UserLogin_LC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UserLogin_LC)
  // optional .pb.UserInfo userinfo = 1;
  if (this->has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->userinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.UserLogin_LC)
  return target;
}

int UserLogin_LC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UserLogin_LC)
  int total_size = 0;

  // optional .pb.UserInfo userinfo = 1;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin_LC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UserLogin_LC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserLogin_LC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserLogin_LC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UserLogin_LC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UserLogin_LC)
    MergeFrom(*source);
  }
}

void UserLogin_LC::MergeFrom(const UserLogin_LC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UserLogin_LC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_userinfo()) {
    mutable_userinfo()->::pb::UserInfo::MergeFrom(from.userinfo());
  }
}

void UserLogin_LC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UserLogin_LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_LC::CopyFrom(const UserLogin_LC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UserLogin_LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_LC::IsInitialized() const {

  return true;
}

void UserLogin_LC::Swap(UserLogin_LC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLogin_LC::InternalSwap(UserLogin_LC* other) {
  std::swap(userinfo_, other->userinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserLogin_LC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_LC_descriptor_;
  metadata.reflection = UserLogin_LC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserLogin_LC

// optional .pb.UserInfo userinfo = 1;
bool UserLogin_LC::has_userinfo() const {
  return !_is_default_instance_ && userinfo_ != NULL;
}
void UserLogin_LC::clear_userinfo() {
  if (GetArenaNoVirtual() == NULL && userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}
const ::pb::UserInfo& UserLogin_LC::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.UserLogin_LC.userinfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
::pb::UserInfo* UserLogin_LC::mutable_userinfo() {
  
  if (userinfo_ == NULL) {
    userinfo_ = new ::pb::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.UserLogin_LC.userinfo)
  return userinfo_;
}
::pb::UserInfo* UserLogin_LC::release_userinfo() {
  // @@protoc_insertion_point(field_release:pb.UserLogin_LC.userinfo)
  
  ::pb::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
void UserLogin_LC::set_allocated_userinfo(::pb::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.UserLogin_LC.userinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterHall_CL::EnterHall_CL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EnterHall_CL)
}

void EnterHall_CL::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EnterHall_CL::EnterHall_CL(const EnterHall_CL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EnterHall_CL)
}

void EnterHall_CL::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EnterHall_CL::~EnterHall_CL() {
  // @@protoc_insertion_point(destructor:pb.EnterHall_CL)
  SharedDtor();
}

void EnterHall_CL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterHall_CL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterHall_CL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterHall_CL_descriptor_;
}

const EnterHall_CL& EnterHall_CL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

EnterHall_CL* EnterHall_CL::default_instance_ = NULL;

EnterHall_CL* EnterHall_CL::New(::google::protobuf::Arena* arena) const {
  EnterHall_CL* n = new EnterHall_CL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterHall_CL::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.EnterHall_CL)
}

bool EnterHall_CL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EnterHall_CL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EnterHall_CL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EnterHall_CL)
  return false;
#undef DO_
}

void EnterHall_CL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EnterHall_CL)
  // @@protoc_insertion_point(serialize_end:pb.EnterHall_CL)
}

::google::protobuf::uint8* EnterHall_CL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EnterHall_CL)
  // @@protoc_insertion_point(serialize_to_array_end:pb.EnterHall_CL)
  return target;
}

int EnterHall_CL::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.EnterHall_CL)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterHall_CL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.EnterHall_CL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnterHall_CL* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterHall_CL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.EnterHall_CL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.EnterHall_CL)
    MergeFrom(*source);
  }
}

void EnterHall_CL::MergeFrom(const EnterHall_CL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.EnterHall_CL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void EnterHall_CL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.EnterHall_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterHall_CL::CopyFrom(const EnterHall_CL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.EnterHall_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterHall_CL::IsInitialized() const {

  return true;
}

void EnterHall_CL::Swap(EnterHall_CL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterHall_CL::InternalSwap(EnterHall_CL* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterHall_CL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterHall_CL_descriptor_;
  metadata.reflection = EnterHall_CL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterHall_CL

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnHall_CL::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnHall_CL::ReturnHall_CL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ReturnHall_CL)
}

void ReturnHall_CL::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReturnHall_CL::ReturnHall_CL(const ReturnHall_CL& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ReturnHall_CL)
}

void ReturnHall_CL::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReturnHall_CL::~ReturnHall_CL() {
  // @@protoc_insertion_point(destructor:pb.ReturnHall_CL)
  SharedDtor();
}

void ReturnHall_CL::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReturnHall_CL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnHall_CL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnHall_CL_descriptor_;
}

const ReturnHall_CL& ReturnHall_CL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

ReturnHall_CL* ReturnHall_CL::default_instance_ = NULL;

ReturnHall_CL* ReturnHall_CL::New(::google::protobuf::Arena* arena) const {
  ReturnHall_CL* n = new ReturnHall_CL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReturnHall_CL::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ReturnHall_CL)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReturnHall_CL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ReturnHall_CL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ReturnHall_CL.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ReturnHall_CL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ReturnHall_CL)
  return false;
#undef DO_
}

void ReturnHall_CL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ReturnHall_CL)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ReturnHall_CL.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.ReturnHall_CL)
}

::google::protobuf::uint8* ReturnHall_CL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ReturnHall_CL)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ReturnHall_CL.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.ReturnHall_CL)
  return target;
}

int ReturnHall_CL::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ReturnHall_CL)
  int total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnHall_CL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ReturnHall_CL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReturnHall_CL* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReturnHall_CL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ReturnHall_CL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ReturnHall_CL)
    MergeFrom(*source);
  }
}

void ReturnHall_CL::MergeFrom(const ReturnHall_CL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ReturnHall_CL)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void ReturnHall_CL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ReturnHall_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnHall_CL::CopyFrom(const ReturnHall_CL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ReturnHall_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnHall_CL::IsInitialized() const {

  return true;
}

void ReturnHall_CL::Swap(ReturnHall_CL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnHall_CL::InternalSwap(ReturnHall_CL* other) {
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReturnHall_CL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnHall_CL_descriptor_;
  metadata.reflection = ReturnHall_CL_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReturnHall_CL

// optional string token = 1;
void ReturnHall_CL::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReturnHall_CL::token() const {
  // @@protoc_insertion_point(field_get:pb.ReturnHall_CL.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReturnHall_CL::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReturnHall_CL.token)
}
 void ReturnHall_CL::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReturnHall_CL.token)
}
 void ReturnHall_CL::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReturnHall_CL.token)
}
 ::std::string* ReturnHall_CL::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReturnHall_CL.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReturnHall_CL::release_token() {
  // @@protoc_insertion_point(field_release:pb.ReturnHall_CL.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReturnHall_CL::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.ReturnHall_CL.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreshUserInfo_LC::kUserinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreshUserInfo_LC::FreshUserInfo_LC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FreshUserInfo_LC)
}

void FreshUserInfo_LC::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  userinfo_ = const_cast< ::pb::UserInfo*>(&::pb::UserInfo::default_instance());
}

FreshUserInfo_LC::FreshUserInfo_LC(const FreshUserInfo_LC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.FreshUserInfo_LC)
}

void FreshUserInfo_LC::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userinfo_ = NULL;
}

FreshUserInfo_LC::~FreshUserInfo_LC() {
  // @@protoc_insertion_point(destructor:pb.FreshUserInfo_LC)
  SharedDtor();
}

void FreshUserInfo_LC::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void FreshUserInfo_LC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshUserInfo_LC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshUserInfo_LC_descriptor_;
}

const FreshUserInfo_LC& FreshUserInfo_LC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

FreshUserInfo_LC* FreshUserInfo_LC::default_instance_ = NULL;

FreshUserInfo_LC* FreshUserInfo_LC::New(::google::protobuf::Arena* arena) const {
  FreshUserInfo_LC* n = new FreshUserInfo_LC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreshUserInfo_LC::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FreshUserInfo_LC)
  if (GetArenaNoVirtual() == NULL && userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}

bool FreshUserInfo_LC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FreshUserInfo_LC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.UserInfo userinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FreshUserInfo_LC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FreshUserInfo_LC)
  return false;
#undef DO_
}

void FreshUserInfo_LC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FreshUserInfo_LC)
  // optional .pb.UserInfo userinfo = 1;
  if (this->has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->userinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb.FreshUserInfo_LC)
}

::google::protobuf::uint8* FreshUserInfo_LC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FreshUserInfo_LC)
  // optional .pb.UserInfo userinfo = 1;
  if (this->has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->userinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.FreshUserInfo_LC)
  return target;
}

int FreshUserInfo_LC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FreshUserInfo_LC)
  int total_size = 0;

  // optional .pb.UserInfo userinfo = 1;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshUserInfo_LC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FreshUserInfo_LC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FreshUserInfo_LC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FreshUserInfo_LC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FreshUserInfo_LC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FreshUserInfo_LC)
    MergeFrom(*source);
  }
}

void FreshUserInfo_LC::MergeFrom(const FreshUserInfo_LC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FreshUserInfo_LC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_userinfo()) {
    mutable_userinfo()->::pb::UserInfo::MergeFrom(from.userinfo());
  }
}

void FreshUserInfo_LC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FreshUserInfo_LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshUserInfo_LC::CopyFrom(const FreshUserInfo_LC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FreshUserInfo_LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshUserInfo_LC::IsInitialized() const {

  return true;
}

void FreshUserInfo_LC::Swap(FreshUserInfo_LC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreshUserInfo_LC::InternalSwap(FreshUserInfo_LC* other) {
  std::swap(userinfo_, other->userinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreshUserInfo_LC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshUserInfo_LC_descriptor_;
  metadata.reflection = FreshUserInfo_LC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FreshUserInfo_LC

// optional .pb.UserInfo userinfo = 1;
bool FreshUserInfo_LC::has_userinfo() const {
  return !_is_default_instance_ && userinfo_ != NULL;
}
void FreshUserInfo_LC::clear_userinfo() {
  if (GetArenaNoVirtual() == NULL && userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}
const ::pb::UserInfo& FreshUserInfo_LC::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.FreshUserInfo_LC.userinfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
::pb::UserInfo* FreshUserInfo_LC::mutable_userinfo() {
  
  if (userinfo_ == NULL) {
    userinfo_ = new ::pb::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:pb.FreshUserInfo_LC.userinfo)
  return userinfo_;
}
::pb::UserInfo* FreshUserInfo_LC::release_userinfo() {
  // @@protoc_insertion_point(field_release:pb.FreshUserInfo_LC.userinfo)
  
  ::pb::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
void FreshUserInfo_LC::set_allocated_userinfo(::pb::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FreshUserInfo_LC.userinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreshUserGoods::kCoinsFieldNumber;
const int FreshUserGoods::kDiamondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreshUserGoods::FreshUserGoods()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FreshUserGoods)
}

void FreshUserGoods::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FreshUserGoods::FreshUserGoods(const FreshUserGoods& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.FreshUserGoods)
}

void FreshUserGoods::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  coins_ = 0;
  diamonds_ = 0;
}

FreshUserGoods::~FreshUserGoods() {
  // @@protoc_insertion_point(destructor:pb.FreshUserGoods)
  SharedDtor();
}

void FreshUserGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreshUserGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshUserGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshUserGoods_descriptor_;
}

const FreshUserGoods& FreshUserGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameHall_2eproto();
  return *default_instance_;
}

FreshUserGoods* FreshUserGoods::default_instance_ = NULL;

FreshUserGoods* FreshUserGoods::New(::google::protobuf::Arena* arena) const {
  FreshUserGoods* n = new FreshUserGoods;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreshUserGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FreshUserGoods)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FreshUserGoods, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FreshUserGoods*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(coins_, diamonds_);

#undef ZR_HELPER_
#undef ZR_

}

bool FreshUserGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FreshUserGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coins = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diamonds;
        break;
      }

      // optional int32 diamonds = 2;
      case 2: {
        if (tag == 16) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamonds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FreshUserGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FreshUserGoods)
  return false;
#undef DO_
}

void FreshUserGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FreshUserGoods)
  // optional int32 coins = 1;
  if (this->coins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coins(), output);
  }

  // optional int32 diamonds = 2;
  if (this->diamonds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diamonds(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb.FreshUserGoods)
}

::google::protobuf::uint8* FreshUserGoods::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FreshUserGoods)
  // optional int32 coins = 1;
  if (this->coins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coins(), target);
  }

  // optional int32 diamonds = 2;
  if (this->diamonds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->diamonds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb.FreshUserGoods)
  return target;
}

int FreshUserGoods::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FreshUserGoods)
  int total_size = 0;

  // optional int32 coins = 1;
  if (this->coins() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coins());
  }

  // optional int32 diamonds = 2;
  if (this->diamonds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamonds());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshUserGoods::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FreshUserGoods)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FreshUserGoods* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FreshUserGoods>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FreshUserGoods)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FreshUserGoods)
    MergeFrom(*source);
  }
}

void FreshUserGoods::MergeFrom(const FreshUserGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FreshUserGoods)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.coins() != 0) {
    set_coins(from.coins());
  }
  if (from.diamonds() != 0) {
    set_diamonds(from.diamonds());
  }
}

void FreshUserGoods::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FreshUserGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshUserGoods::CopyFrom(const FreshUserGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FreshUserGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshUserGoods::IsInitialized() const {

  return true;
}

void FreshUserGoods::Swap(FreshUserGoods* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreshUserGoods::InternalSwap(FreshUserGoods* other) {
  std::swap(coins_, other->coins_);
  std::swap(diamonds_, other->diamonds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreshUserGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshUserGoods_descriptor_;
  metadata.reflection = FreshUserGoods_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FreshUserGoods

// optional int32 coins = 1;
void FreshUserGoods::clear_coins() {
  coins_ = 0;
}
 ::google::protobuf::int32 FreshUserGoods::coins() const {
  // @@protoc_insertion_point(field_get:pb.FreshUserGoods.coins)
  return coins_;
}
 void FreshUserGoods::set_coins(::google::protobuf::int32 value) {
  
  coins_ = value;
  // @@protoc_insertion_point(field_set:pb.FreshUserGoods.coins)
}

// optional int32 diamonds = 2;
void FreshUserGoods::clear_diamonds() {
  diamonds_ = 0;
}
 ::google::protobuf::int32 FreshUserGoods::diamonds() const {
  // @@protoc_insertion_point(field_get:pb.FreshUserGoods.diamonds)
  return diamonds_;
}
 void FreshUserGoods::set_diamonds(::google::protobuf::int32 value) {
  
  diamonds_ = value;
  // @@protoc_insertion_point(field_set:pb.FreshUserGoods.diamonds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
